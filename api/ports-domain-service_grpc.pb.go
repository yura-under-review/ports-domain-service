// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsDomainServiceClient is the client API for PortsDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsDomainServiceClient interface {
	UpsertPort(ctx context.Context, in *PortInfoRequest, opts ...grpc.CallOption) (*PortInfoResponse, error)
	BatchUpsertPorts(ctx context.Context, in *BatchUpsertPortsRequest, opts ...grpc.CallOption) (*BatchUpsertPortsResponse, error)
}

type portsDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsDomainServiceClient(cc grpc.ClientConnInterface) PortsDomainServiceClient {
	return &portsDomainServiceClient{cc}
}

func (c *portsDomainServiceClient) UpsertPort(ctx context.Context, in *PortInfoRequest, opts ...grpc.CallOption) (*PortInfoResponse, error) {
	out := new(PortInfoResponse)
	err := c.cc.Invoke(ctx, "/ports_domain_service.PortsDomainService/UpsertPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsDomainServiceClient) BatchUpsertPorts(ctx context.Context, in *BatchUpsertPortsRequest, opts ...grpc.CallOption) (*BatchUpsertPortsResponse, error) {
	out := new(BatchUpsertPortsResponse)
	err := c.cc.Invoke(ctx, "/ports_domain_service.PortsDomainService/BatchUpsertPorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortsDomainServiceServer is the server API for PortsDomainService service.
// All implementations must embed UnimplementedPortsDomainServiceServer
// for forward compatibility
type PortsDomainServiceServer interface {
	UpsertPort(context.Context, *PortInfoRequest) (*PortInfoResponse, error)
	BatchUpsertPorts(context.Context, *BatchUpsertPortsRequest) (*BatchUpsertPortsResponse, error)
	mustEmbedUnimplementedPortsDomainServiceServer()
}

// UnimplementedPortsDomainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortsDomainServiceServer struct {
}

func (UnimplementedPortsDomainServiceServer) UpsertPort(context.Context, *PortInfoRequest) (*PortInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPort not implemented")
}
func (UnimplementedPortsDomainServiceServer) BatchUpsertPorts(context.Context, *BatchUpsertPortsRequest) (*BatchUpsertPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertPorts not implemented")
}
func (UnimplementedPortsDomainServiceServer) mustEmbedUnimplementedPortsDomainServiceServer() {}

// UnsafePortsDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsDomainServiceServer will
// result in compilation errors.
type UnsafePortsDomainServiceServer interface {
	mustEmbedUnimplementedPortsDomainServiceServer()
}

func RegisterPortsDomainServiceServer(s grpc.ServiceRegistrar, srv PortsDomainServiceServer) {
	s.RegisterService(&PortsDomainService_ServiceDesc, srv)
}

func _PortsDomainService_UpsertPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServiceServer).UpsertPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ports_domain_service.PortsDomainService/UpsertPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServiceServer).UpsertPort(ctx, req.(*PortInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsDomainService_BatchUpsertPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServiceServer).BatchUpsertPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ports_domain_service.PortsDomainService/BatchUpsertPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServiceServer).BatchUpsertPorts(ctx, req.(*BatchUpsertPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortsDomainService_ServiceDesc is the grpc.ServiceDesc for PortsDomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsDomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ports_domain_service.PortsDomainService",
	HandlerType: (*PortsDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPort",
			Handler:    _PortsDomainService_UpsertPort_Handler,
		},
		{
			MethodName: "BatchUpsertPorts",
			Handler:    _PortsDomainService_BatchUpsertPorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ports-domain-service.proto",
}
